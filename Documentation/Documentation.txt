The following details must be mentioned in the project documentation file. You can add additional details in the documentation if you want to. 

Abstract

This project is a game that uses Pygame, an open source library for game development. The game that was made is a turn based sequence game where 
a player character and two other enemy character battle to death. The hope of this project in the future is to add future levels and bosses that the
user is able to progress through the game to reach in order to complete the game. If possible in the future, each new iteration of the game would have
new levels and areas that the user can progress through. The target audience of this game is gamers who enjoy turn based games such as Pokemon and Final Fantasy.
This project is a learning experience used to advance our experience using Pygame and how to develop games using this library. Some of the things that were learned 
using this library is how to use sprites or sprite sheets in order to create animations. By using sprite sheets, we were able to create idle, attack, death and hurt 
animation to create a somewhat interactive game. 

Introduction

This project uses Python and the Pygame open source library to create a game. The focus of this project was to create a clone of
popular turn based fighting RPGS such as Pokemon and Final Fantasy. In the current version of the game, there is one level where you
fight against two enemies. You are a knight character named Eren who must defeat two enemies. The game ends when the player reaches 0 HP and enters 
a death state or the player defeats the two enemies before him. The player is able to reset the game back to the starting once their playthrough ends
and start a new fight. The hope for the game is to increase the levels that are featured currently and add more. Furthermore, we hope to include a skill tree
with different character classes such as Mage, assassin or brute. This classes would all have different skill trees and have a different feel to them.


Overall Description [software requirement, hardware requirement, functional requirements, non-functional requirements]

Software requirements
- Pygame
- Python
- Executable or just repository of project

Hardware requirement
- Any machine that can run Linux or Windows
- 4GBs of ram

Functional requirements:
- The system shall prompt the user with the option to play or quit the game
- The system shall prompt the first level of the game when the play button is pressed
- The system shall allow the user to begin the game by attacking
- The system shall let the enemy characters attack the user
- The system shall end the game when the user reaches 0 hp or defeats the first level of the game
- The system shall prompt the user with the option to restart the game when the user reaches the end state of the game

Non-functional requirements
- Performance: The game should run stable and without stutters 
- Compatibility: The game should be compatible with both Windows and Linux
- Security: The Executable of the game should be secured somewhere safe and not comprimised in anyway.
            If the game is tampered in anyway, then the Executable should be deleted from any system that contains the file.
- Availability: The game should be able to run at all times, even with no internet access

Proposed System

The game is compatible on both Windows and Linux. The game is proposed to be used for Linux and Windows and further
versions of the game should be able to run on both operating systems. Such iterations of the game would include new
character models, abilitities and levels. Through each iteration of updates, the game shall be tested to insure that it runs
on both operating systems, Windows and Linux. As the game is not memory heavy, it should not require a beefy computer to
run it.

Research Section [Brief summary about 2 different research paper related to your project domain]

The main papers we used in order to create our game is: Python & Pygame by Al Sweigart and Beginning Game Development
with Python and Pygame: From Novice to Professional by Will McGugan. Al Sweigart essentially analyzes and goes over the basics
and fundamentals of developing video games with Python and Pygame. Those foundational game developing ideas being but not
limited to: user input, hit detection, lighting, and implementing graphics. Since the emphasis was on the basics, we still needed
to incorporate advanced features such as making the combat turn based and creating AI for enemies. Will McGugan's paper
goes over the software design in order to implement these features, with the AI proving to be incredibly in-depth. Both these
papers are great for learning how Pygame works and how the functions that Pygame provides works such as Pygame.display.update()
which Al Sweigart explains in his book. Sweigart's book also explains how to use the functions provided by Pygame which is incredibly
useful as you can reference that later on if you forget. Lastly, the Pygame documentation provides the most up to date information on Pygame.




References

- https://www.pygame.org/docs/
- https://www.lob.de/pdf/9781590598726.pdf
- https://inventwithpython.com/makinggames.pdf